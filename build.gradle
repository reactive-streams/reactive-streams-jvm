buildscript {
    repositories { 
        jcenter()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "biz.aQute.bnd:biz.aQute.bnd.gradle:4.3.1"
    }
}

subprojects {
    apply plugin: "java-library"
    apply plugin: 'biz.aQute.bnd.builder'

    group = "org.reactivestreams"
    version = "1.0.3"

    sourceCompatibility = 1.6
    targetCompatibility = 1.6

    tasks.withType(JavaCompile) {
        configure(options) {
            compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
            encoding = "UTF-8"
        }
    }

    tasks.withType(Javadoc) {
        configure(options) {
            encoding "UTF-8"
            docEncoding "UTF-8"
            charSet "UTF-8"
            linkSource true
            noTimestamp true
        }
    }

    tasks.withType(Test) {
      testLogging {
        exceptionFormat "full"
        events "failed", "started", "standard_out", "standard_error"
      }
    }

    repositories {
        mavenCentral()
    }

    if (name in ["reactive-streams",
                 "reactive-streams-tck",
                 "reactive-streams-tck-flow",
                 "reactive-streams-examples"]) {
        apply plugin: "maven"
        apply plugin: "signing"
        apply plugin: "maven-publish"

        signing {
            sign configurations.archives
            required { gradle.taskGraph.hasTask(uploadArchives) }
        }
        task sourcesJar(type: Jar) {
            classifier "sources"
            from sourceSets.main.allSource
        }

        task javadocJar(type: Jar) {
            classifier "javadoc"
            from javadoc
        }

        publishing {
          publications {
            mavenJava(MavenPublication) {
              from components.java
            }
          }
          repositories {
            mavenLocal()
          }
        }

        artifacts {
            archives sourcesJar, javadocJar
        }

        uploadArchives {
            repositories {
                mavenDeployer {
                    gradle.taskGraph.whenReady { taskGraph ->
                        if (taskGraph.hasTask(uploadArchives)) {
                            def userProp = "sonatypeOssUsername"
                            def passwordProp = "sonatypeOssPassword"
                            def user = project.properties[userProp]
                            def password = project.properties[passwordProp]

                            if (user == null || password == null) {
                                throw new InvalidUserDataException(
                                        "Cannot perform $uploadArchives.path due to missing credentials.\n" +
                                        "Run with command line args `-P$userProp=«username» -P$passwordProp=«password»` or add these properties to $gradle.gradleUserHomeDir/gradle.properties.\n")
                            }

                            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                                authentication(userName: user, password: password)
                            }
                            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                                authentication(userName: user, password: password)
                            }
                        }
                    }
                }
            }
        }

        tasks.withType(Upload) {
            repositories.withType(MavenResolver) {
                it.beforeDeployment { signing.signPom(it) }
                it.pom.whenConfigured { pom ->
                    pom.project {
                        url "http://www.reactive-streams.org/"
                        name "reactive-streams"
                        description "A Protocol for Asynchronous Non-Blocking Data Sequence"
                        inceptionYear "2014"

                        scm {
                            url "git@github.com:reactive-streams/reactive-streams.git"
                            connection "scm:git:git@github.com:reactive-streams/reactive-streams.git"
                        }

                        licenses {
                            license {
                                name "MIT-0"
                                url "https://spdx.org/licenses/MIT-0.html"
                                distribution "repo"
                            }
                        }

                        developers {
                            developer {
                                id "reactive-streams-sig"
                                name "Reactive Streams SIG"
                                url "http://www.reactive-streams.org/"
                            }
                        }
                    }
                }
            }
        }
    } else {
        uploadArchives.enabled = false
    }
}
