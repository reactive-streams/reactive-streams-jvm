plugins {
    alias(libs.plugins.bnd) apply false
    alias(libs.plugins.testlogger) apply false
}

def sonatypeRepo = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
def sonatypeSnapshots = 'https://oss.sonatype.org/content/repositories/snapshots/'

def distributionRepository = properties["distributionRepository"] ?: sonatypeRepo
def snapshotsRepository = properties["snapshotsRepository"] ?: sonatypeSnapshots

def baselineToolchain = properties["javaBaseline"] ?: libs.versions.java.baseline.get()

subprojects {
    apply plugin: "java-library"
    apply plugin: libs.plugins.bnd.get().pluginId
    apply plugin: libs.plugins.testlogger.get().pluginId

    group = "org.reactivestreams"
    version = "1.0.4"

    dependencyLocking {
        lockAllConfigurations()
    }

    tasks.compileJava {
        group = "build"
        description = "Compile Java 1.6 classes"
        sourceCompatibility = 1.6
        targetCompatibility = 1.6
        javaCompiler = javaToolchains.compilerFor {
            languageVersion = JavaLanguageVersion.of(baselineToolchain)
        }
    }

    tasks.withType(JavaCompile) {
        configure(options) {
            compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
            encoding = "UTF-8"
        }
    }

    tasks.withType(Javadoc) {
        configure(options) {
            encoding "UTF-8"
            docEncoding "UTF-8"
            charSet "UTF-8"
            linkSource true
            noTimestamp true
        }
    }

    testlogger {
        theme 'mocha-parallel'
        showExceptions true
        showStackTraces true
        showPassed true
        showSkipped false
        showFailed true
        showStandardStreams false
    }

    repositories {
        mavenCentral()
    }

    if (name in ["reactive-streams",
                 "reactive-streams-tck",
                 "reactive-streams-tck-flow",
                 "reactive-streams-examples"]) {
        apply plugin: "signing"
        apply plugin: "publishing"
        apply plugin: "maven-publish"

        signing {
            sign configurations.archives
            required { gradle.taskGraph.hasTask("publish") }
        }

        task sourcesJar(type: Jar) {
            archiveClassifier = "sources"
            from sourceSets.main.allSource
        }

        task javadocJar(type: Jar) {
            archiveClassifier = "javadoc"
            from javadoc
        }

        publishing {
          publications {
            mavenJava(MavenPublication) {
              from components.java
            }
          }
          repositories {
            mavenLocal()

            gradle.taskGraph.whenReady { taskGraph ->
              if (taskGraph.hasTask("publish")) {
                  def userProp = "sonatypeOssUsername"
                  def passwordProp = "sonatypeOssPassword"
                  def user = project.properties[userProp]
                  def password = project.properties[passwordProp]

                  if ((user == null || password == null) && distributionRepository == sonatypeRepo) {
                      throw new InvalidUserDataException(
                         "Cannot perform $uploadArchives.path due to missing credentials.\n" +
                         "Run with command line args `-P$userProp=«username» -P$passwordProp=«password»` or add these properties to $gradle.gradleUserHomeDir/gradle.properties.\n")
                  }

                  repository(url: distributionRepository) {
                    authentication(userName: user, password: password)
                  }
                  if (sonatypeSnapshots != "") {
                    snapshotRepository(url: snapshotsRepository) {
                      authentication(userName: user, password: password)
                    }
                  }
              }
            }
          }
        }

        artifacts {
            archives sourcesJar, javadocJar
        }
        signing {

        }
    } else {
        uploadArchives.enabled = false
    }
}
