description = "reactive-streams"
def isJdk9OrGreater = false
try {
    Class.forName("java.util.concurrent.Flow")
    isJdk9OrGreater = true
} catch (ClassNotFoundException cnfe) {

}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
    }
    if (isJdk9OrGreater) java9 {
        java {
            srcDirs = ['src/main/java', 'src/main/java9']
        }
    }
}

configurations {
  mrjarArtifact
}

jar {
    if (isJdk9OrGreater) into('META-INF/versions/9') {
        from(sourceSets.java9.output) {
            include '**/FlowAdapters*'
            include '**/module-info.class'
        }
    }

    bnd ('Bundle-Name': 'reactive-streams-jvm',
            'Bundle-Vendor': 'Reactive Streams SIG',
            'Bundle-Description': 'Reactive Streams API',
            'Bundle-DocURL': 'http://reactive-streams.org',
            'Bundle-Version': project.version,
            'Export-Package': 'org.reactivestreams.*,!META-INF.*',
            'Multi-Release': true,
            'Bundle-SymbolicName': 'org.reactivestreams.reactive-streams',
            '-fixupmessages': '^Classes found in the wrong directory: .*'
    )
}

artifacts { mrjarArtifact jar }

compileJava {
    group = "build"
    description = "Compile Java 1.6 classes"
}

if (isJdk9OrGreater) {
    compileJava9Java {
        group = "build"
        description = "Compile Java 9 classes for MR JAR"

        sourceCompatibility = 9
        targetCompatibility = 9
    }

    tasks.register('validateModularJar', Exec) {
        dependsOn jar
        inputs.file jar.outputs.files.asPath

        executable = "jar"
        args = ['--describe-module', '--file', jar.outputs.files.asPath]
    }

    tasks.check {
        finalizedBy validateModularJar
    }
}